/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Views;

import Controllers.CustomerController;
import Models.Customer;
import Utils.UtilDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author misma
 */
public class FrmAllCustomer extends javax.swing.JInternalFrame implements IView<Customer> {
    CustomerController controller;

    public void setController(CustomerController controller) {
        this.controller = controller;
    }
    
    /**
     * Creates new form FrmAllCustomer
     */
    public FrmAllCustomer() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnVolver1 = new javax.swing.JButton();
        tabla = new javax.swing.JScrollPane();
        TablaMostrar = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Listado de todos los clientes");

        btnVolver.setText("Volver");

        jLabel2.setText("ID");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnVolver1.setText("Eliminar");
        btnVolver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolver1ActionPerformed(evt);
            }
        });

        TablaMostrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Birthday", "Phone", "Email", "Year"
            }
        ));
        tabla.setViewportView(TablaMostrar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabla, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBuscar)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(btnVolver1)
                        .addGap(82, 82, 82)
                        .addComponent(btnVolver)
                        .addGap(202, 202, 202)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVolver)
                    .addComponent(btnVolver1))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        this.read();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnVolver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolver1ActionPerformed
        this.delete();
    }//GEN-LAST:event_btnVolver1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaMostrar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JButton btnVolver1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane tabla;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insert() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void update() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void delete() {
            String inputId = txtID.getText();

    if (!inputId.isEmpty()) {
        try {
            int id = Integer.parseInt(inputId);
            int confirmation = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este cliente?", "Confirmación de eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmation == JOptionPane.YES_OPTION) {
                controller.delete(id);
                JOptionPane.showMessageDialog(this, "Cliente eliminado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                refreshTable(); 
            }
        } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, introduce un ID.", "Error", JOptionPane.ERROR_MESSAGE);        }
    } 
}
    private void refreshTable() {
    List<Customer> customers = controller.readAll(); 
    displayAll(customers); 
}

    @Override
    public void read() {
    String inputId = txtID.getText();

    if (!inputId.isEmpty()) {
        try {
            int id = Integer.parseInt(inputId);
            Customer customer = controller.read(id); 
            display(customer); 
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, introduce un ID.", "Error", JOptionPane.ERROR_MESSAGE);
    }
   }

    @Override
    public void readAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void showMessage(String str) {
                JOptionPane.showMessageDialog(this, str);

    }

    @Override
    public void showErrorMessage(String str) {
     JOptionPane.showConfirmDialog(this, str, "Error", JOptionPane.ERROR_MESSAGE);

    }

    @Override
    public void display(Customer element) {
     String[] columnNames = {"ID", "Nombre", "Fecha", "Teléfono", "Correo", "Edad"};
    DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
    
    this.TablaMostrar.setModel(tableModel); 

    if (element != null) {
        Object[] rowData = {
            element.getId(),
            element.getName(),
            UtilDate.localDatetoString(element.getBirthday()),
            element.getPhone(),
            element.getEmail(),
            element.getAge()
        };
        tableModel.addRow(rowData); 
    } else {
        JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    @Override
    public void displayAll(List<Customer> list) {
     DefaultTableModel tableModel = (DefaultTableModel) TablaMostrar.getModel();
        tableModel.setRowCount(0); 
        if (list!=null && !list.isEmpty()) {
            for(Customer customer : list){
                Object[] rowData={
                    customer.getId(),
                    customer.getName(),
                    customer.getBirthday(),
                    customer.getPhone(),
                    customer.getEmail(),
                    customer.getAge() 
                };
                tableModel.addRow(rowData);
            }
        }else{
           JOptionPane.showMessageDialog(null, "No hay clientes registrados.");
        }
    }

}
